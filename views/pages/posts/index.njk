{# views/pages/posts/index.njk #}
{% extends "layouts/base.njk" %}

{% block content %}
<div x-data="postsManager({
  initialFilters: {{ filters | json }},
  currentPage: {{ page }},
  totalPages: {{ totalPages }}
})" class="tw-space-y-6">

  {# Filtres #}
  <div class="tw-bg-white tw-shadow-sm tw-rounded-lg tw-p-4">
    <div class="tw-grid tw-grid-cols-1 md:tw-grid-cols-3 tw-gap-4">
      {# Recherche #}
      <div>
        <input
          type="text"
          x-model="filters.search"
          @input="handleSearchInput"
          placeholder="Rechercher..."
          class="tw-w-full tw-px-3 tw-py-2 tw-border tw-rounded-md"
        >
      </div>

      {# Tri #}
      <div>
        <select
          x-model="filters.sortBy"
          @change="handleFiltersChange"
          class="tw-w-full tw-px-3 tw-py-2 tw-border tw-rounded-md"
        >
          <option value="id">Date (défaut)</option>
          <option value="title">Titre</option>
          <option value="user">Auteur</option>
        </select>
      </div>

      {# Direction du tri #}
      <div>
        <button
          @click="toggleSortOrder"
          class="tw-w-full tw-px-3 tw-py-2 tw-border tw-rounded-md tw-flex tw-items-center tw-justify-center"
          x-text="filters.sortOrder === 'asc' ? '↑ Ascendant' : '↓ Descendant'"
        ></button>
      </div>
    </div>
  </div>

  {# Liste des posts #}
  <div
    id="posts-list"
    hx-get="/posts/list"
    hx-trigger="filtersChanged from:body"
    hx-push-url="/posts"
    hx-indicator="#loading-indicator"
  >
    {% include "pages/posts/_list.njk" %}
  </div>

  {# Indicateur de chargement #}
  <div
    class="tw-fixed tw-bottom-4 tw-right-4 tw-bg-black tw-text-white tw-px-4 tw-py-2 tw-rounded-md"
    x-show="loading"
    x-transition
    style="display: none;"
    id="loading-indicator"
  >
    Chargement...
  </div>
</div>

<script>
function postsManager(config) {
  return {
    filters: {
      ...config.initialFilters,
      page: config.currentPage || 1,  // Garantir une page par défaut
      limit: config.initialFilters.limit || 10  // Valeur par défaut standard
    },
    loading: false,
    debounceTimer: null,

    init() {
      // Gérer la synchronisation avec l'URL
      this.syncFiltersFromURL();

      // Écouter les changements d'historique
      window.addEventListener('popstate', this.syncFiltersFromURL.bind(this));

      // Gestion explicite du chargement avec HTMX
      document.body.addEventListener('htmx:beforeOnLoad', () => {
        this.loading = true;
      });

      document.body.addEventListener('htmx:afterOnLoad', () => {
        this.loading = false;
      });

      document.body.addEventListener('htmx:loadError', () => {
        this.loading = false;
      });
    },

    syncFiltersFromURL() {
      const urlParams = new URLSearchParams(window.location.search);

      // Mapping explicite pour éviter les injections
      this.filters = {
        page: parseInt(urlParams.get('page') || '1', 10),
        limit: parseInt(urlParams.get('limit') || '10', 10),
        search: urlParams.get('search') || '',
        sortBy: urlParams.get('sortBy') || 'id',
        sortOrder: urlParams.get('sortOrder') || 'asc'
      };

      this.handleFiltersChange(false);  // Sans rechargement forcé
    },

    handleFiltersChange(shouldReload = true) {
      clearTimeout(this.debounceTimer);

      this.debounceTimer = setTimeout(() => {
        this.loading = true;
        this.updateURL();

        if (shouldReload) {
          this.triggerHtmxReload();
        }
      }, 300);
    },

    triggerHtmxReload() {
      const listContainer = document.getElementById('posts-list');
      if (listContainer) {
        const targetUrl = this.buildFilteredUrl('/posts/list');
        listContainer.setAttribute('hx-get', targetUrl);
        htmx.ajax('GET', targetUrl, listContainer);
      }
    },


    buildFilteredUrl(baseUrl) {
      const url = new URL(baseUrl, window.location.origin);

      // N'ajouter que les filtres non-vides
      Object.entries(this.filters).forEach(([key, value]) => {
        if (value && value !== '' && value !== 1) {
          url.searchParams.set(key, encodeURIComponent(value));
        }
      });

      return decodeURIComponent(url.toString())
    },

    updateURL() {
      const url = this.buildFilteredUrl('/posts');
      window.history.pushState({}, '', url);
    },

    // Méthodes de manipulation des filtres
    handleSearchInput() {
      this.filters.page = 1;  // Réinitialiser à la première page
      this.handleFiltersChange();
    },

    toggleSortOrder() {
      this.filters.sortOrder = this.filters.sortOrder === 'asc' ? 'desc' : 'asc';
      this.handleFiltersChange();
    }
  };
}

document.addEventListener('DOMContentLoaded', function () {
  const loadingIndicator = document.getElementById('loading-indicator');
  if (loadingIndicator) {
    console.log('⚔️⚔️⚔️⚔️⚔️');

    loadingIndicator.style.display = 'none';
  }
});
</script>
{% endblock %}
